name: Build and Push Docker Image

on:
  workflow_run:
    workflows: ["Check Python Version"]
    types:
      - completed

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
    steps:
      # Step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Check if version file has been modified in the last 30 minutes
      - name: Check if version file has changed in the last 30 minutes
        id: check_changes
        run: |
          git fetch origin main
          # Get the last commit time for version/python.xml
          LAST_COMMIT_TIME=$(git log -1 --format=%ct -- version/python.xml)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_COMMIT_TIME))
          
          if [ $TIME_DIFF -le 1800 ]; then
            echo "Changes detected in version file within the last 30 minutes."
            echo "has_changes=true" >> $GITHUB_ENV
          else
            echo "No changes detected in version file within the last 30 minutes."
            echo "has_changes=false" >> $GITHUB_ENV
          fi

  build:
    runs-on: ubuntu-latest
    needs: check_changes
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.check_changes.outputs.has_changes == 'true' }}
    steps:
      # Step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Get the latest stable version of Python Alpine
      - name: Get the latest stable version of Python Alpine
        id: get_version
        run: |
          ALPINE_DIGEST=$(curl -s https://hub.docker.com/v2/repositories/library/python/tags/alpine | jq -r '.images[0].digest')
          STABLE_VERSION=$(curl -s https://hub.docker.com/v2/repositories/library/python/tags/?page_size=100 | \
            jq -r --arg ALPINE_DIGEST "$ALPINE_DIGEST" \
            '.results[] | select(.images[0].digest == $ALPINE_DIGEST) | .name' | \
            grep -E '^[0-9]+(\.[0-9]+){0,2}-alpine$' | sort -V | tail -n 1 | sed 's/-alpine$//')
          
          echo "VERSION=${STABLE_VERSION}" >> $GITHUB_ENV

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t erstt/rap:python${{ env.VERSION }} -t erstt/rap:latest .

      # Step 5: Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push erstt/rap:python${{ env.VERSION }}
          docker push erstt/rap:latest
