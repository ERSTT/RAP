name: Check Python Version

on:
  schedule:
    - cron: '40 * * * *'
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Get latest stable Python version
        id: get_version
        run: |
          # Get the SHA256 of the alpine tag
          ALPINE_DIGEST=$(curl -s https://hub.docker.com/v2/repositories/library/python/tags/alpine | jq -r '.images[0].digest')
          # Get the latest stable version matching the alpine SHA256
          STABLE_VERSION=$(curl -s https://hub.docker.com/v2/repositories/library/python/tags/?page_size=100 | \
            jq -r --arg ALPINE_DIGEST "$ALPINE_DIGEST" \
            '.results[] | select(.images[0].digest == $ALPINE_DIGEST) | .name' | \
            grep -E '^[0-9]+(\.[0-9]+){0,2}-alpine$' | sort -V | tail -n 1 | sed 's/-alpine$//')
          echo "Latest stable Python version: ${STABLE_VERSION}"
          echo "<?xml version='1.0' encoding='UTF-8'?>
          <version>
              <latest>${STABLE_VERSION}</latest>
          </version>" > python_version.xml
          echo "version=${STABLE_VERSION}" >> $GITHUB_ENV

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch origin version
          git checkout version || git checkout -b version

          # 如果本地分支与远程分支没有共同历史，则允许合并不相关的历史
          git merge --allow-unrelated-histories origin/version || echo "No changes to merge"

          git add python_version.xml
          git commit -m "Update python version to ${{ env.version }}" || echo "No changes to commit"
          
          # 尝试推送，如果失败则先拉取远程更改
          git push origin version || (git pull --rebase origin version && git push origin version)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
